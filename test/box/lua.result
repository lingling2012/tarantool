space = box.schema.create_space('tweedledum', { id = 0 })
---
...
space:create_index('primary', 'hash', { parts = { 0, 'num' }})
---
...
'  lua says: hello'
---
- '  lua says: hello'
...
t = {} for n in pairs(box) do table.insert(t, tostring(n)) end table.sort(t)
---
...
t
---
- - auto_increment
  - call_loadproc
  - cfg
  - cjson
  - coredump
  - counter
  - delete
  - dostring
  - errinj
  - error
  - fiber
  - flags
  - index
  - info
  - insert
  - ipc
  - net
  - on_reload_configuration
  - pack
  - plugin
  - process
  - raise
  - replace
  - replace_if_exists
  - schema
  - select
  - select_limit
  - select_range
  - select_reverse_range
  - session
  - slab
  - snapshot
  - socket
  - space
  - stat
  - time
  - time64
  - tuple
  - unpack
  - update
  - uuid
  - uuid_hex
...
t = nil
---
...
box.pack()
---
- error: 'bad argument #1 to ''?'' (string expected, got no value)'
...
box.pack(1)
---
- error: 'box.pack: argument count does not match the format'
...
box.pack('abc')
---
- error: 'box.pack: argument count does not match the format'
...
box.pack('a', ' - hello')
---
- ' - hello'
...
box.pack('Aa', ' - hello', ' world')
---
- ' - hello world'
...
string.sub(box.pack('p', 1684234849), 2)
---
- dcba
...
box.pack('p', 'this string is 45 characters long 1234567890 ')
---
- !!binary 2S10aGlzIHN0cmluZyBpcyA0NSBjaGFyYWN0ZXJzIGxvbmcgMTIzNDU2Nzg5MCA=
...
box.pack('s', 0x4d)
---
- "M\0"
...
box.pack('ssss', 25940, 29811, 28448, 11883)
---
- Test ok.
...
box.pack('SSSS', 25940, 29811, 28448, 11883)
---
- Test ok.
...
box.pack('SSSSSSSS', 28493, 29550, 27680, 27497, 29541, 20512, 29285, 8556)
---
- Mons likes Perl!
...
box.pack('bsil', 84, 29541, 1802444916, 2338318684567380014ULL)
---
- 'Test ok. Let`s '
...
box.unpack('b', 'T')
---
- 84
...
box.unpack('s', 'Te')
---
- 25940
...
box.unpack('i', 'Test')
---
- 1953719636
...
box.unpack('l', 'Test ok.')
---
- 3344889333436081492
...
box.unpack('bsil', box.pack('bsil', 255, 65535, 4294967295, tonumber64('18446744073709551615')))
---
- 255
- 65535
- 4294967295
- 18446744073709551615
...
box.unpack('ppp', box.pack('ppp', 'one', 'two', 'three'))
---
- one
- two
- three
...
num, str, num64 = box.unpack('ppp', box.pack('ppp', 666, 'string', tonumber64('666666666666666')))
---
...
num, str, num64
---
- 666
- string
- 666666666666666
...
box.unpack('=p', box.pack('=p', 1, '666'))
---
- 1
- '666'
...
box.unpack('','')
---
...
box.unpack('ii', box.pack('i', 1))
---
- error: 'box.unpack(''i''): got 4 bytes (expected: 8+)'
...
box.unpack('i', box.pack('ii', 1, 1))
---
- error: 'box.unpack(''i''): too many bytes: unpacked 4, total 8'
...
box.unpack('+p', box.pack('=p', 1, '666'))
---
- error: 'box.unpack(''+p''): unexpected opcode: offset 0, expected ''+'',found ''='''
...
box.process(13, box.pack('iip', 0, 1, {1, 'testing', 'lua rocks'}))
---
- [1, 'testing', 'lua rocks']
...
box.process(17, box.pack('iiiiip', 0, 0, 0, 2^31, 1, {1}))
---
- [1, 'testing', 'lua rocks']
...
box.process(21, box.pack('iip', 0, 1, {1}))
---
- [1, 'testing', 'lua rocks']
...
box.process(17, box.pack('iiiiip', 0, 0, 0, 2^31, 1, {1}))
---
...
box.process(22, box.pack('iii', 0, 0, 0))
---
- error: box.process(CALL, ...) is not allowed
...
call box.process('abc', 'def')
---
- error:
    errcode: ER_ILLEGAL_PARAMS
    errmsg: Illegal parameters, unsupported command code, check the error log
...
call box.pack(1953719668)
---
- error:
    errcode: ER_PROC_LUA
    errmsg: Lua error: box.pack: argument count does not match the format
...
call box.pack('p', 'this string is 45 characters long 1234567890 ')
---
- ['\xd9-this string is 45 characters long 1234567890 ']
...
call box.pack('p', 'ascii symbols are visible starting from code 20')
---
- ['\xd9/ascii symbols are visible starting from code 20']
...
function f1() return 'testing', 1, false, -1, 1.123, 1e123, nil end
---
...
f1()
---
- testing
- 1
- false
- -1
- 1.123
- 1e+123
- null
...
call f1()
---
- ['testing']
- [1]
- [False]
- [-1]
- [1.123]
- [1e+123]
- [None]
...
f1=nil
---
...
call f1()
---
- error:
    errcode: ER_NO_SUCH_PROC
    errmsg: Procedure 'f1' is not defined
...
function f1() return f1 end
---
...
call f1()
---
- error:
    errcode: ER_PROC_LUA
    errmsg: Lua error: msgpack.encode: can not encode Lua type 'function'
...
insert into t0 values (1, 'test box delete')
---
- [1, 'test box delete']
...
call box.delete(0, 1)
---
- [1, 'test box delete']
...
insert into t0 values (1, 'test box delete')
---
- [1, 'test box delete']
...
box.delete(0, 1)
---
- [1, 'test box delete']
...
box.delete(0, 1)
---
...
insert into t0 values (1684234849, 'test box delete')
---
- [1684234849, 'test box delete']
...
call box.delete(0, 1)
---
...
call box.delete(0, 1684234849)
---
- [1684234849, 'test box delete']
...
call box.delete(0, 1684234849)
---
...
insert into t0 values (1684234849, 'test box delete')
---
- [1684234849, 'test box delete']
...
box.delete(0, 1684234849)
---
- [1684234849, 'test box delete']
...
box.delete(0, 1684234849)
---
...
call box.select(0, 0, 1684234849)
---
...
insert into t0 values (1684234849, 'test box.select()')
---
- [1684234849, 'test box.select()']
...
call box.select(0, 0, 1684234849)
---
- [1684234849, 'test box.select()']
...
box.select(0, 0, 1684234849)
---
- [1684234849, 'test box.select()']
...
box.select(0, 0)
---
- error: Invalid key part count in an exact match (expected 1, got 0)
...
box.select(0, 1)
---
- error: 'No index #1 is defined in space 0'
...
box.select(0)
---
- error: '[string "-- box.lua (internal file)..."]:11: box.pack: expected 32-bit int'
...
call box.replace(0, 1684234849, 'hello', 'world')
---
- [1684234849, 'hello', 'world']
...
call box.replace(0, 1684234849, 'goodbye', 'universe')
---
- [1684234849, 'goodbye', 'universe']
...
call box.select(0, 0, 1684234849)
---
- [1684234849, 'goodbye', 'universe']
...
call box.select(0, 0, 1684234849)
---
- [1684234849, 'goodbye', 'universe']
...
call box.replace(0, 1684234849)
---
- [1684234849]
...
call box.select(0, 0, 1684234849)
---
- [1684234849]
...
call box.delete(0, 1684234849)
---
- [1684234849]
...
call box.delete(0, 1684234849)
---
...
call box.insert(0, 1953719668, 'old', 1684234849)
---
- [1953719668, 'old', 1684234849]
...
call box.insert(0, 1953719668, 'old', 1684234849)
---
- error:
    errcode: ER_TUPLE_FOUND
    errmsg: Duplicate key exists in unique index 0
...
call box.update(0, 1953719668, '=p=p', 0, 1936941424, 1, 'new')
---
- [1936941424, 'new', 1684234849]
...
call box.select(0, 0, 1936941424)
---
- [1936941424, 'new', 1684234849]
...
call box.select_range(0, 0, 1, 1936941424)
---
- [1936941424, 'new', 1684234849]
...
call box.update(0, 1234567890, '+p', 2, 1)
---
...
call box.update(0, 1936941424, '+p', 2, 1)
---
- [1936941424, 'new', 1684234850]
...
call box.update(0, 1936941424, '-p', 2, 1)
---
- [1936941424, 'new', 1684234849]
...
call box.update(0, 1936941424, '-p', 2, 1)
---
- [1936941424, 'new', 1684234848]
...
box.update(0, 1936941424, '+p', 2, 1)
---
- [1936941424, 'new', 1684234849]
...
call box.select(0, 0, 1936941424)
---
- [1936941424, 'new', 1684234849]
...
function field_x(space, key, field_index) return (box.select(space, 0, key))[field_index] end
---
...
call field_x(0, 1936941424, 0)
---
- [1936941424]
...
call field_x(0, 1936941424, 1)
---
- ['new']
...
call box.delete(0, 1936941424)
---
- [1936941424, 'new', 1684234849]
...
dofile(...)
---
...
fifomax
---
- 5
...
fifo_push(1953719668, 1)
---
- [1953719668, 3, 4, 1, 0, 0, 0, 0]
...
fifo_push(1953719668, 2)
---
- [1953719668, 4, 5, 1, 2, 0, 0, 0]
...
fifo_push(1953719668, 3)
---
- [1953719668, 5, 6, 1, 2, 3, 0, 0]
...
fifo_push(1953719668, 4)
---
- [1953719668, 6, 7, 1, 2, 3, 4, 0]
...
fifo_push(1953719668, 5)
---
- [1953719668, 7, 3, 1, 2, 3, 4, 5]
...
fifo_push(1953719668, 6)
---
- [1953719668, 3, 4, 6, 2, 3, 4, 5]
...
fifo_push(1953719668, 7)
---
- [1953719668, 4, 5, 6, 7, 3, 4, 5]
...
fifo_push(1953719668, 8)
---
- [1953719668, 5, 6, 6, 7, 8, 4, 5]
...
fifo_top(1953719668)
---
- 8
...
box.delete(0, 1953719668)
---
- [1953719668, 5, 6, 6, 7, 8, 4, 5]
...
fifo_top(1953719668)
---
- 0
...
box.delete(0, 1953719668)
---
- [1953719668, 3, 3, 0, 0, 0, 0, 0]
...
t = {} for k,v in pairs(box.cfg) do table.insert(t, k..': '..tostring(v)) end
---
...
t
---
- - 'io_collect_interval: 0'
  - 'pid_file: box.pid'
  - 'slab_alloc_factor: 2'
  - 'slab_alloc_minimal: 64'
  - 'admin_port: 33015'
  - 'logger: cat - >> tarantool.log'
  - 'reload: function_ptr'
  - 'slab_alloc_arena: 0.1'
  - 'log_level: 4'
  - 'snap_io_rate_limit: 0'
  - 'too_long_threshold: 0.5'
  - 'secondary_port: 33014'
  - 'primary_port: 33013'
  - 'logger_nonblock: true'
  - 'panic_on_wal_error: false'
  - 'snap_dir: .'
  - 'coredump: false'
  - 'replication_protocol: 1.6'
  - 'wal_dir: .'
  - 'readahead: 16320'
  - 'wal_mode: fsync_delay'
  - 'rows_per_wal: 50'
  - 'panic_on_snap_error: true'
  - 'local_hot_standby: false'
  - 'script_dir: .'
  - 'replication_port: 0'
  - 'bind_ipaddr: INADDR_ANY'
  - 'wal_fsync_delay: 0'
  - 'backlog: 1024'
  - 'wal_dir_rescan_delay: 0.1'
...
t = {} for k,v in pairs(box.space[0]) do if type(v) ~= 'table' then table.insert(t, k..': '..tostring(v)) end end
---
...
t
---
- - 'temporary: false'
  - 'n: 0'
  - 'enabled: true'
  - 'name: tweedledum'
  - 'arity: 0'
...
box.cfg.reload()
---
- ok
...
t = {} for k,v in pairs(box.cfg) do table.insert(t, k..': '..tostring(v)) end
---
...
t
---
- - 'io_collect_interval: 0'
  - 'pid_file: box.pid'
  - 'slab_alloc_factor: 2'
  - 'slab_alloc_minimal: 64'
  - 'admin_port: 33015'
  - 'logger: cat - >> tarantool.log'
  - 'reload: function_ptr'
  - 'slab_alloc_arena: 0.1'
  - 'log_level: 4'
  - 'snap_io_rate_limit: 0'
  - 'too_long_threshold: 0.5'
  - 'secondary_port: 33014'
  - 'primary_port: 33013'
  - 'logger_nonblock: true'
  - 'panic_on_wal_error: false'
  - 'snap_dir: .'
  - 'coredump: false'
  - 'replication_protocol: 1.6'
  - 'wal_dir: .'
  - 'readahead: 16320'
  - 'wal_mode: fsync_delay'
  - 'rows_per_wal: 50'
  - 'panic_on_snap_error: true'
  - 'local_hot_standby: false'
  - 'script_dir: .'
  - 'replication_port: 0'
  - 'bind_ipaddr: INADDR_ANY'
  - 'wal_fsync_delay: 0'
  - 'backlog: 1024'
  - 'wal_dir_rescan_delay: 0.1'
...
t = {} for k,v in pairs(box.space[0]) do if type(v) ~= 'table' then table.insert(t, k..': '..tostring(v)) end end
---
...
t
---
- - 'temporary: false'
  - 'n: 0'
  - 'enabled: true'
  - 'name: tweedledum'
  - 'arity: 0'
...
box.cfg.nosuchoption = 1
---
- error: '[string "getmetatable(box.cfg).__newindex = function(t..."]:2: Attempt to
    modify a read-only table'
...
box.space[300] = 1
---
...
box.index.bind('abc', 'cde')
---
- error: 'bad argument #1 to ''?'' (number expected, got string)'
...
box.index.bind(1, 2)
---
- error: Space 1 does not exist
...
box.index.bind(0, 1)
---
- error: 'No index #1 is defined in space 0'
...
box.index.bind(0, 0)
---
- ' index 0'
...
#box.index.bind(0,0)
---
- 0
...
#box.space[0].index[0].idx
---
- 0
...
box.insert(0, 1953719668)
---
- [1953719668]
...
box.insert(0, 1684234849)
---
- [1684234849]
...
#box.index.bind(0,0)
---
- 2
...
#box.space[0].index[0].idx
---
- 2
...
box.delete(0, 1953719668)
---
- [1953719668]
...
#box.index.bind(0,0)
---
- 1
...
box.delete(0, 1684234849)
---
- [1684234849]
...
#box.space[0].index[0].idx
---
- 0
...
#box.index.bind(0,0)
---
- 0
...
box.space[0]:insert(1953719668, 'hello world')
---
- [1953719668, 'hello world']
...
box.space[0]:update(1953719668, '=p', 1, 'bye, world')
---
- [1953719668, 'bye, world']
...
box.space[0]:delete(1953719668)
---
- [1953719668, 'bye, world']
...
t=box.space[0]:insert(1953719668)
---
...
t:next(1684234849)
---
- error: 'tuple.next(): bad arguments'
...
t:next(1)
---
- error: 'tuple.next(): bad arguments'
...
t:next(t)
---
- error: 'bad argument #2 to ''?'' (box.tuple.iterator expected, got userdata)'
...
t:next(t:next())
---
- error: 'tuple.next(): bad arguments'
...
ta = {} for k, v in t:pairs() do table.insert(ta, v) end
---
...
ta
---
- - 1953719668
...
t=box.space[0]:replace(1953719668, 'another field')
---
...
ta = {} for k, v in t:pairs() do table.insert(ta, v) end
---
...
ta
---
- - 1953719668
  - another field
...
t=box.space[0]:replace(1953719668, 'another field', 'one more')
---
...
ta = {} for k, v in t:pairs() do table.insert(ta, v) end
---
...
ta
---
- - 1953719668
  - another field
  - one more
...
t=box.tuple.new({'a', 'b', 'c', 'd'})
---
...
ta = {} for it,field in t:pairs() do table.insert(ta, field); end
---
...
ta
---
- - a
  - b
  - c
  - d
...
it, field = t:next()
---
...
getmetatable(it)
---
- box.tuple.iterator
...
box.space[0]:truncate()
---
...
box.fiber.sleep(0)
---
...
box.fiber.sleep(0.01)
---
...
box.fiber.sleep(0.0001)
---
...
box.fiber.sleep('hello')
---
- error: 'fiber.sleep(delay): bad arguments'
...
box.fiber.sleep(box, 0.001)
---
- error: 'fiber.sleep(delay): bad arguments'
...
box.fiber.cancel(box.fiber.self())
---
- error: 'fiber.cancel(): subject fiber does not permit cancel'
...
f = box.fiber.self()
---
...
old_id = f:id()
---
...
box.fiber.cancel(f)
---
- error: 'fiber.cancel(): subject fiber does not permit cancel'
...
box.fiber.self():id() - old_id < 3
---
- true
...
box.fiber.cancel(box.fiber.self())
---
- error: 'fiber.cancel(): subject fiber does not permit cancel'
...
box.fiber.self():id() - old_id < 5
---
- true
...
g = box.fiber.self()
---
...
f==g
---
- true
...
function r() f = box.fiber.create(r) return (box.fiber.resume(f)) end
---
...
r()
---
- true
...
f = box.fiber.create(print('hello')
---
- error: '[string "f = box.fiber.create(print(''hello'')"]:1: '')'' expected near
    ''<eof>'''
...
box.fiber.resume(f)
---
- error: 'fiber.resume(): the fiber is dead'
...
function r(a, b) return a, b end
---
...
f=box.fiber.create(r)
---
...
box.fiber.resume(f)
---
- true
- null
- null
...
f=box.fiber.create(r)
---
...
box.fiber.resume(f, 'hello')
---
- true
- hello
- null
...
f=box.fiber.create(r)
---
...
box.fiber.resume(f, 'hello', 'world')
---
- true
- hello
- world
...
f=box.fiber.create(r)
---
...
box.fiber.resume(f, 'hello', 'world', 'wide')
---
- true
- hello
- world
...
function y(a, b) c=box.fiber.yield(a) return box.fiber.yield(b, c) end
---
...
f=box.fiber.create(y)
---
...
box.fiber.resume(f, 'hello', 'world')
---
- hello
...
box.fiber.resume(f, 'wide')
---
- world
- wide
...
box.fiber.resume(f)
---
- true
...
function y() box.fiber.detach() while true do box.replace(0, 1953719668, os.time()) box.fiber.sleep(0.001) end end
---
...
f = box.fiber.create(y)
---
...
box.fiber.resume(f)
---
...
box.fiber.sleep(0.002)
---
...
box.fiber.cancel(f)
---
...
box.fiber.resume(f)
---
- error: 'fiber.resume(): the fiber is dead'
...
f=nil
---
...
for k=1, 10000, 1 do box.fiber.create(function() box.fiber.detach() end) end
---
...
collectgarbage('collect')
---
- 0
...
box.fiber.find(900)
---
- null
...
box.fiber.find(910)
---
- null
...
box.fiber.find(920)
---
- null
...
f = function() box.fiber.wrap(f) end
---
...
call f()
---
...
f = function(a, b) box.fiber.wrap(function(arg) result = arg end, a..b) end
---
...
f('hello ', 'world')
---
...
result
---
- hello world
...
f('bye ', 'world')
---
...
result
---
- bye world
...
box.fiber.wrap(function() result = box.fiber.status() end)
---
- null
...
result
---
- running
...
# A test case for Bug#933487
# tarantool crashed during shutdown if non running LUA fiber
# was created
#
f = box.fiber.create(function () return true end)
---
...
box.snapshot()
---
- ok
...
box.snapshot()
---
- error: can't save snapshot, errno 17 (File exists)
...
box.snapshot()
---
- error: can't save snapshot, errno 17 (File exists)
...
box.fiber.resume(f)
---
- true
- true
...
f = box.fiber.create(function () return true end)
---
...
#
#
#
box.space[0]:replace(1953719668, 'something to splice')
---
- [1953719668, 'something to splice']
...
box.space[0]:update(1953719668, ':p', 1, box.pack('ppp', 0, 4, 'no'))
---
- [1953719668, 'nothing to splice']
...
box.space[0]:update(1953719668, ':p', 1, box.pack('ppp', 0, 2, 'every'))
---
- [1953719668, 'everything to splice']
...
box.space[0]:update(1953719668, ':p', 1, box.pack('ppp', 100, 2, 'every'))
---
- [1953719668, 'everything to spliceevery']
...
box.space[0]:update(1953719668, ':p', 1, box.pack('ppp', -100, 2, 'every'))
---
- error: 'Argument type in operation on field 1 does not match field type: expected
    a UINT'
...
box.space[0]:truncate()
---
...
box.space[0]:insert(1953719668, 'hello', 'october', '20th'):unpack()
---
- 1953719668
- hello
- october
- 20th
...
box.space[0]:truncate()
---
...
function f1(...) return {...} end
---
...
function f2(...) return f1({...}) end
---
...
call f1('test_', 'test_')
---
- ['test_', 'test_']
...
call f2('test_', 'test_')
---
- ['test_', 'test_']
...
call f1()
---
- []
...
call f2()
---
- []
...
function f3() return {{'hello'}, {'world'}} end
---
...
call f3()
---
- ['hello']
- ['world']
...
function f3() return {'hello', {'world'}} end
---
...
call f3()
---
- ['hello', ('world',)]
...
function f3() return 'hello', {{'world'}, {'canada'}} end
---
...
call f3()
---
- ['hello']
- [('world',), ('canada',)]
...
function f3() return {}, '123', {{}, {}} end
---
...
call f3()
---
- []
- ['123']
- [(), ()]
...
function f3() return { {{'hello'}} } end
---
...
call f3()
---
- [('hello',)]
...
function f3() return { box.tuple.new('hello'), {'world'} } end
---
...
call f3()
---
- ['hello']
- ['world']
...
function f3() return { {'world'}, box.tuple.new('hello') } end
---
...
call f3()
---
- ['world']
- ['hello']
...
call f1('jason')
---
- ['jason']
...
call f1('jason', 1, 1953719668, 2, 'stewart')
---
- ['jason', 1, 1953719668, 2, 'stewart']
...
 function box.crossjoin(space0, space1, limit)   local result = {}   for k0, v0 in box.space[space0]:pairs() do     for k1, v1 in box.space[space1]:pairs() do       if limit <= 0 then         return unpack(result)       end       newtuple = v0:totable()       for _, v in v1:pairs() do table.insert(newtuple, v) end       table.insert(result, newtuple)       limit = limit - 1     end   end   return unpack(result) end
---
...
 function sort(...)     local tuples = {...}     function compare_tables(t1, t2)         return (tostring(t1) < tostring(t2))     end     table.sort(tuples, compare_tables)     return unpack(tuples) end; 
---
...
sort(box.crossjoin(0, 0, 0))
---
...
sort(box.crossjoin(0, 0, 10000))
---
...
box.space[0]:insert(1)
---
- [1]
...
call box.crossjoin(0, 0, 10000)
---
- [1, 1]
...
box.space[0]:insert(2)
---
- [2]
...
call box.crossjoin(0, 0, 10000)
---
- [1, 1]
- [1, 2]
- [2, 1]
- [2, 2]
...
box.space[0]:insert(3, 'hello')
---
- [3, 'hello']
...
call box.crossjoin(0, 0, 10000)
---
- [1, 1]
- [1, 2]
- [1, 3, 'hello']
- [2, 1]
- [2, 2]
- [2, 3, 'hello']
- [3, 'hello', 1]
- [3, 'hello', 2]
- [3, 'hello', 3, 'hello']
...
box.space[0]:insert(4, 'world')
---
- [4, 'world']
...
box.space[0]:insert(5, 'hello world')
---
- [5, 'hello world']
...
call box.crossjoin(0, 0, 10000)
---
- [1, 1]
- [1, 2]
- [1, 3, 'hello']
- [1, 4, 'world']
- [1, 5, 'hello world']
- [2, 1]
- [2, 2]
- [2, 3, 'hello']
- [2, 4, 'world']
- [2, 5, 'hello world']
- [3, 'hello', 1]
- [3, 'hello', 2]
- [3, 'hello', 3, 'hello']
- [3, 'hello', 4, 'world']
- [3, 'hello', 5, 'hello world']
- [4, 'world', 1]
- [4, 'world', 2]
- [4, 'world', 3, 'hello']
- [4, 'world', 4, 'world']
- [4, 'world', 5, 'hello world']
- [5, 'hello world', 1]
- [5, 'hello world', 2]
- [5, 'hello world', 3, 'hello']
- [5, 'hello world', 4, 'world']
- [5, 'hello world', 5, 'hello world']
...
box.space[0]:truncate()
---
...
box.crossjoin = nil
---
...

# A test case for Bug#901674
# No way to inspect exceptions from Box in Lua

pcall(box.insert, 99, 1, 1953719668)
---
- false
- Space 99 does not exist
...
pcall(box.insert, 0, 1, 'hello')
---
- true
- [1, 'hello']
...
pcall(box.insert, 0, 1, 'hello')
---
- false
- Duplicate key exists in unique index 0
...
box.space[0]:truncate()
---
...

# A test case for Bug#908094
# Lua provides access to os.execute()

os.execute('ls')
---
- error: '[string "return os.execute(''ls'')"]:1: attempt to call field ''execute''
    (a nil value)'
...

#
# box.fiber test (create, resume, yield, status)
#

dofile(...)
---
...

# test box.fiber.status functions: invalid arguments

box.fiber.status(1)
---
- error: 'bad argument #1 to ''?'' (box.fiber expected, got number)'
...
box.fiber.status('fafa-gaga')
---
- error: 'bad argument #1 to ''?'' (box.fiber expected, got string)'
...
box.fiber.status(nil)
---
- error: 'bad argument #1 to ''?'' (box.fiber expected, got nil)'
...

# run fiber's test

box_fiber_run_test()
---
- - 'tester: status(tester) = running'
  - 'tester: status(printer) = suspended'
  - 'count: 1'
  - 'printer: tester status = normal'
  - 'printer: printer status = running'
  - 'A: odd  1'
  - 'status: suspended'
  - 'count: 2'
  - 'B: odd  1'
  - 'C: event  2'
  - 'status: suspended'
  - 'count: 3'
  - 'A: odd  3'
  - 'status: suspended'
  - 'count: 4'
  - 'B: odd  3'
  - 'C: event  4'
  - 'D: event  4'
  - 'A: odd  5'
  - 'status: suspended'
  - 'count: 5'
  - 'B: odd  5'
  - 'status: dead'
...
tonumber64(123)
---
- 123
...
tonumber64('123')
---
- 123
...
type(tonumber64('123')) == 'cdata'
---
- true
...
tonumber64('9223372036854775807') == tonumber64('9223372036854775807')
---
- true
...
tonumber64('9223372036854775807') - tonumber64('9223372036854775800')
---
- 7
...
tonumber64('18446744073709551615') == tonumber64('18446744073709551615')
---
- true
...
tonumber64('18446744073709551615') + 1
---
- 0
...
tonumber64(-1)
---
- 18446744073709551615
...
tonumber64('184467440737095516155')
---
- error: 'lua_tointeger64: bad argument'
...
string.byte(box.pack('p', tonumber64(123)))
---
- 123
...
box.space[0]:truncate()
---
...
call box.insert(0, 1000001, 1000002, 1000003, 1000004, 1000005)
---
- [1000001, 1000002, 1000003, 1000004, 1000005]
...
call box.update(0, 1000001, '#p', 0, 1)
---
- [1000002, 1000003, 1000004, 1000005]
...
call box.update(0, 1000002, '#p', 0, 1)
---
- [1000003, 1000004, 1000005]
...
call box.update(0, 1000003, '#p', 0, 1)
---
- [1000004, 1000005]
...
call box.update(0, 1000004, '#p', 0, 1)
---
- [1000005]
...
box.update(0, 1000005, '#p', 0, 1)
---
- error: Tuple field count 0 is less than required by a defined index (expected 1)
...
box.space[0]:truncate()
---
...
box.insert(0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
---
- [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
...
box.update(0, 0, '#p', 42, 1)
---
- error: Field 42 was not found in the tuple
...
box.update(0, 0, '#p', 3, 'abirvalg')
---
- error: 'Argument type in operation on field 3 does not match field type: expected
    a NUM'
...
box.update(0, 0, '#p#p#p', 1, 1, 3, 2, 5, 1)
---
- [0, 2, 3, 6, 7, 9, 10, 11, 12, 13, 14, 15]
...
box.update(0, 0, '#p', 3, 3)
---
- [0, 2, 3, 10, 11, 12, 13, 14, 15]
...
box.update(0, 0, '#p', 4, 123456)
---
- [0, 2, 3, 10]
...
box.update(0, 0, '#p', 2, 4294967295)
---
- [0, 2]
...
box.update(0, 0, '#p', 1, 0)
---
- error: 'Field 1 UPDATE error: cannot delete 0 fields'
...
box.space[0]:truncate()
---
...

# test box.update: INSERT field

box.insert(0, 1, 3, 6, 9)
---
- [1, 3, 6, 9]
...
box.update(0, 1, '!p', 1, 2)
---
- [1, 2, 3, 6, 9]
...
box.update(0, 1, '!p!p!p!p', 3, 4, 3, 5, 4, 7, 4, 8)
---
- [1, 2, 3, 5, 8, 7, 4, 6, 9]
...
box.update(0, 1, '!p!p!p', 9, 10, 9, 11, 9, 12)
---
- [1, 2, 3, 5, 8, 7, 4, 6, 9, 12, 11, 10]
...
box.space[0]:truncate()
---
...
box.insert(0, 1, 'tuple')
---
- [1, 'tuple']
...
box.update(0, 1, '#p!p=p', 1, 1, 1, 'inserted tuple', 2, 'set tuple')
---
- [1, 'inserted tuple', 'set tuple']
...
box.space[0]:truncate()
---
...
box.insert(0, 1, 'tuple')
---
- [1, 'tuple']
...
box.update(0, 1, '=p!p#p', 1, 'set tuple', 1, 'inerted tuple', 2, 1)
---
- [1, 'inerted tuple']
...
box.update(0, 1, '!p!p', 0, 3, 0, 2)
---
- [2, 3, 1, 'inerted tuple']
...
box.space[0]:truncate()
---
...

# Test for Bug #955226
# Lua Numbers are passed back wrongly as strings
#

function foo() return 1, 2, '1', '2' end
---
...
call foo()
---
- [1]
- [2]
- ['1']
- ['2']
...

# test update's assign opearations

box.replace(0, 1, 'field string value')
---
- [1, 'field string value']
...
box.update(0, 1, '=p=p=p', 1, 'new field string value', 2, 42, 3, 0xdeadbeef)
---
- [1, 'new field string value', 42, 3735928559]
...

# test update's arith opearations

box.update(0, 1, '+p&p|p^p', 2, 16, 3, 0xffff0000, 3, 0x0000a0a0, 3, 0xffff00aa)
---
- [1, 'new field string value', 58, 559063050]
...

# test update splice operation

ops_list = {}
---
...
table.insert(ops_list, box.upd.splice(1, 0, 3, 'the newest'))
---
- error: '[string "return table.insert(ops_list, box.upd.splice(..."]:1: attempt to
    index field ''upd'' (a nil value)'
...
box.update(0, 1, ':p', 1, box.pack('ppp', 0, 3, 'the newest'))
---
- [1, 'the newest field string value', 58, 559063050]
...

# test update delete operations

box.update(0, 1, '#p#p', 3, 1, 2, 1)
---
- [1, 'the newest field string value']
...

# test update insert operations

box.update(0, 1, '!p!p!p!p', 1, 1, 1, 2, 1, 3, 1, 4)
---
- [1, 4, 3, 2, 1, 'the newest field string value']
...
box.space[0]:truncate()
---
...

#
# test that ffi extension is inaccessible
#

ffi
---
- null
...

#
# Lua init lua script test
#


# Load testing init lua script


# Test asscess to box configuration

print_config()
---
- io_collect_interval: 0
  pid_file: box.pid
  slab_alloc_factor: 2
  slab_alloc_minimal: 64
  admin_port: 33015
  logger: cat - >> tarantool.log
  slab_alloc_arena: 0.1
  log_level: 4
  snap_io_rate_limit: 0
  backlog: 1024
  secondary_port: 33014
  too_long_threshold: 0.5
  logger_nonblock: true
  wal_dir: .
  snap_dir: .
  coredump: false
  replication_protocol: 1.6
  readahead: 16320
  local_hot_standby: false
  wal_mode: fsync_delay
  rows_per_wal: 50
  panic_on_snap_error: true
  panic_on_wal_error: false
  script_dir: .
  replication_port: 0
  bind_ipaddr: INADDR_ANY
  wal_fsync_delay: 0
  primary_port: 33013
  wal_dir_rescan_delay: 0.1
...

# Test bug #977898

box.insert(0, 4, 8, 16)
---
- [4, 8, 16]
...

# Test insert from init.lua

box.select(0, 0, 1)
---
- [1, 2, 4, 8]
...
box.select(0, 0, 2)
---
- [2, 4, 8, 16]
...
box.select(0, 0, 4)
---
- [4, 8, 16]
...

# Test bug #1002272

floor(0.5)
---
- 0
...
floor(0.9)
---
- 0
...
floor(1.1)
---
- 1
...

# clean-up after tests

box.insert(box.schema.SPACE_ID, 0, 0, 'tweedledum')
---
- [0, 0, 'tweedledum']
...
box.insert(box.schema.INDEX_ID, 0, 0, 'primary', 'hash', 1, 1, 0, 'num')
---
- [0, 0, 'primary', 'hash', 1, 1, 0, 'num']
...

# Test box.tuple:slice()

t=box.tuple.new({'0', '1', '2', '3', '4', '5', '6', '7'})
---
...
t:slice(0)
---
- '0'
- '1'
- '2'
- '3'
- '4'
- '5'
- '6'
- '7'
...
t:slice(-1)
---
- '7'
...
t:slice(1)
---
- '1'
- '2'
- '3'
- '4'
- '5'
- '6'
- '7'
...
t:slice(-1, -1)
---
- error: 'tuple.slice(): start must be less than end'
...
t:slice(-1, 1)
---
- error: 'tuple.slice(): start must be less than end'
...
t:slice(1, -1)
---
- '1'
- '2'
- '3'
- '4'
- '5'
- '6'
...
t:slice(1, 3)
---
- '1'
- '2'
...
t:slice(7)
---
- '7'
...
t:slice(8)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(9)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(100500)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(9, -1)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(6, -1)
---
- '6'
...
t:slice(4, 4)
---
- error: 'tuple.slice(): start must be less than end'
...
t:slice(6, 4)
---
- error: 'tuple.slice(): start must be less than end'
...
t:slice(0, 0)
---
- error: 'tuple.slice(): end > field count'
...
t:slice(9, 10)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(-7)
---
- '1'
- '2'
- '3'
- '4'
- '5'
- '6'
- '7'
...
t:slice(-8)
---
- '0'
- '1'
- '2'
- '3'
- '4'
- '5'
- '6'
- '7'
...
t:slice(-9)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(-100500)
---
- error: 'tuple.slice(): start >= field count'
...
t:slice(500, 700)
---
- error: 'tuple.slice(): start >= field count'
...
box.space[0]:truncate()
---
...

# A test case for Bug#911641 box.fiber.sleep() works incorrectly if
# a fiber is attached.

function r() return box.fiber.sleep(0.01) end
---
...
f = box.fiber.create(r)
---
...
box.fiber.resume(f)
---
- true
...
box.fiber.resume(f)
---
- error: 'fiber.resume(): the fiber is dead'
...
function r() box.fiber.yield(box.space[0]:insert(0, 0, 1)) box.fiber.yield(box.space[0]:select(0, 0)) box.fiber.yield(box.space[0]:truncate()) end
---
...
f = box.fiber.create(r)
---
...
box.fiber.resume(f)
---
- [0, 0, 1]
...
box.fiber.resume(f)
---
- [0, 0, 1]
...
box.fiber.resume(f)
---
...
box.fiber.resume(f)
---
- true
...
function r() return box.fiber.yield(box.fiber.create(r)) end
---
...
f = r()
---
...
f1 = box.fiber.resume(f)
---
...
f2 = box.fiber.resume(f1)
---
...
f3 = box.fiber.resume(f2)
---
...
f4 = box.fiber.resume(f3)
---
...
f5 = box.fiber.resume(f4)
---
...
f6 = box.fiber.resume(f5)
---
...
f7 = box.fiber.resume(f6)
---
...
f8 = box.fiber.resume(f7)
---
...
f9 = box.fiber.resume(f8)
---
...
f10 = box.fiber.resume(f9)
---
...
f11 = box.fiber.resume(f10)
---
...
f12 = box.fiber.resume(f11)
---
...
f13 = box.fiber.resume(f12)
---
...
f14 = box.fiber.resume(f13)
---
...
f15 = box.fiber.resume(f14)
---
...
f16 = box.fiber.resume(f15)
---
...
f17 = box.fiber.resume(f16)
---
...
box.fiber.resume(f)
---
- true
...
box.fiber.resume(f1)
---
- true
...
box.fiber.resume(f2)
---
- true
...
box.fiber.resume(f3)
---
- true
...
box.fiber.resume(f4)
---
- true
...
box.fiber.resume(f5)
---
- true
...
box.fiber.resume(f6)
---
- true
...
box.fiber.resume(f7)
---
- true
...
box.fiber.resume(f8)
---
- true
...
box.fiber.resume(f9)
---
- true
...
box.fiber.resume(f10)
---
- true
...
box.fiber.resume(f11)
---
- true
...
box.fiber.resume(f12)
---
- true
...
box.fiber.resume(f13)
---
- true
...
box.fiber.resume(f14)
---
- true
...
box.fiber.resume(f15)
---
- true
...
box.fiber.resume(f16)
---
- true
...
f17 = nil
---
...
function r() box.fiber.detach() box.fiber.sleep(1000) end
---
...
f = box.fiber.create(r)
---
...
box.fiber.resume(f)
---
...
box.fiber.resume(f)
---
- error: 'fiber.resume(): can''t resume a detached fiber'
...
box.fiber.cancel(f)
---
...
box.fiber.resume(f)
---
- error: 'fiber.resume(): the fiber is dead'
...

# A test case for Bug#103491
# server CALL processing bug with name path longer than two
# https://bugs.launchpad.net/tarantool/+bug/1034912

f = function() return 'OK' end
---
...
test = {}
---
...
test.f = f
---
...
test.test = {}
---
...
test.test.f = f
---
...
call f()
---
- ['OK']
...
call test.f()
---
- ['OK']
...
call test.test.f()
---
- ['OK']
...

# A test case for box.counter

box.counter.inc(0, 1)
---
- 1
...
box.select(0, 0, 1)
---
- [1, 1]
...
box.counter.inc(0, 1)
---
- 2
...
box.counter.inc(0, 1)
---
- 3
...
box.select(0, 0, 1)
---
- [1, 3]
...
box.counter.dec(0, 1)
---
- 2
...
box.counter.dec(0, 1)
---
- 1
...
box.select(0, 0, 1)
---
- [1, 1]
...
box.counter.dec(0, 1)
---
- 0
...
box.select(0, 0, 1)
---
...
# box.dostring()
box.dostring('abc')
---
- error: '[string "abc"]:1: ''='' expected near ''<eof>'''
...
box.dostring('abc=2')
---
...
box.dostring('return abc')
---
- 2
...
box.dostring('return ...', 1, 2, 3)
---
- 1
- 2
- 3
...
# box.update: push/pop fields
box.insert(0, 1684234849)
---
- [1684234849]
...
box.update(0, 1684234849, '#p', 1, 1)
---
- error: Field 1 was not found in the tuple
...
box.update(0, 1684234849, '=p', -1, 'push1')
---
- [1684234849, 'push1']
...
box.update(0, 1684234849, '=p', -1, 'push2')
---
- [1684234849, 'push1', 'push2']
...
box.update(0, 1684234849, '=p', -1, 'push3')
---
- [1684234849, 'push1', 'push2', 'push3']
...
box.update(0, 1684234849, '#p=p', 1, 1, -1, 'swap1')
---
- [1684234849, 'push2', 'push3', 'swap1']
...
box.update(0, 1684234849, '#p=p', 1, 1, -1, 'swap2')
---
- [1684234849, 'push3', 'swap1', 'swap2']
...
box.update(0, 1684234849, '#p=p', 1, 1, -1, 'swap3')
---
- [1684234849, 'swap1', 'swap2', 'swap3']
...
box.update(0, 1684234849, '#p=p', -1, 1, -1, 'noop1')
---
- [1684234849, 'swap1', 'swap2', 'noop1']
...
box.update(0, 1684234849, '#p=p', -1, 1, -1, 'noop2')
---
- [1684234849, 'swap1', 'swap2', 'noop2']
...
box.update(0, 1684234849, '#p=p', -1, 1, -1, 'noop3')
---
- [1684234849, 'swap1', 'swap2', 'noop3']
...
box.space[0]:truncate()
---
...
# A test case for Bug#1043804 lua error() -> server crash
error()
---
- error: 
...
# Test box.fiber.name()
old_name = box.fiber.name()
---
...
box.fiber.name() == old_name
---
- true
...
box.fiber.self():name() == old_name
---
- true
...
box.fiber.name('hello fiber')
---
...
box.fiber.name()
---
- hello fiber
...
box.fiber.self():name('bye fiber')
---
...
box.fiber.self():name()
---
- bye fiber
...
box.fiber.self():name(old_name)
---
...
# A test case for bitwise operations 
bit.lshift(1, 32)
---
- 1
...
bit.band(1, 3)
---
- 1
...
bit.bor(1, 2)
---
- 3
...
# A test case for Bug#1061747 'tonumber64 is not transitive'
tonumber64(tonumber64(2))
---
- 2
...
tostring(tonumber64(tonumber64(3)))
---
- 3ULL
...
# box.tuple.new test
box.tuple.new()
---
- []
...
box.tuple.new(1)
---
- [1]
...
box.tuple.new('string')
---
- ['string']
...
box.tuple.new(tonumber64('18446744073709551615'))
---
- [18446744073709551615]
...
box.tuple.new({tonumber64('18446744073709551615'), 'string', 1})
---
- [18446744073709551615, 'string', 1]
...
# A test case for the key as an tuple
t=box.insert(0, 777, '0', '1', '2', '3')
---
...
t
---
- [777, '0', '1', '2', '3']
...
box.replace(0, t)
---
- [777, '0', '1', '2', '3']
...
box.replace(0, 777, { 'a', 'b', 'c', {'d', 'e', t}})
---
- [777, ['a', 'b', 'c', ['d', 'e', [777, '0', '1', '2', '3']]]]
...
# A test case for tuple:totable() method
t=box.select(0, 0, 777):totable()
---
...
t[2], t[3], t[4], t[5]
---
- - a
  - b
  - c
  - - d
    - e
    - - 777
      - '0'
      - '1'
      - '2'
      - '3'
- null
- null
- null
...
box.space[0]:truncate()
---
...
# A test case for Bug#1119389 '(lbox_tuple_index) crashes on 'nil' argument'
t=box.insert(0, 8989)
---
...
t[nil]
---
- error: '[string "return t[nil]"]:1: bad argument #2 to ''__index'' (string expected,
    got nil)'
...
# A test case for Bug#1131108 'tonumber64 from negative int inconsistency'
tonumber64(-1)
---
- 18446744073709551615
...
tonumber64(-1LL)
---
- 18446744073709551615
...
tonumber64(-1ULL)
---
- 18446744073709551615
...
-1
---
- -1
...
-1LL
---
- -1
...
-1ULL
---
- 18446744073709551615
...
tonumber64(-1.0)
---
- 18446744073709551615
...
6LL - 7LL
---
- -1
...
# A test case for Bug#1131108 'incorrect conversion from boolean lua value to tarantool tuple'

function bug1075677() local range = {} table.insert(range, 1>0) return range end
---
...
call bug1075677()
---
- [True]
...
bug1075677=nil
---
...
box.tuple.new(false)
---
- [false]
...
box.tuple.new({false})
---
- [false]
...
t = box.tuple.new('abc')
---
...
t
---
- ['abc']
...
t:bsize()
---
- 5
...
call box.dostring('box.raise(33333, "Hey!")')
---
- error:
    errcode: ER_UNKNOWN (33333)
    errmsg: Hey!
...
box.space[0]:drop()
---
...
box.tuple.new()
---
- []
...
box.tuple.new({})
---
- []
...
box.tuple.new(1)
---
- [1]
...
box.tuple.new({1})
---
- [1]
...
box.tuple.new(1, 2, 3, 4, 5)
---
- [1, 2, 3, 4, 5]
...
box.tuple.new({1, 2, 3, 4, 5})
---
- [1, 2, 3, 4, 5]
...
box.tuple.new({'a', 'b'}, {'c', 'd'}, {'e', 'f'})
---
- [['a', b], ['c', 'd'], ['e', 'f']]
...
box.tuple.new({{'a', 'b'}, {'c', 'd'}, {'e', 'f'}})
---
- [['a', b], ['c', 'd'], ['e', 'f']]
...
box.tuple.new({1, 2}, 'x', 'y', 'z', {c = 3, d = 4}, {e = 5, f = 6})
---
- [[1, 2], 'x', 'y', 'z', {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]
...
box.tuple.new({{1, 2}, 'x', 'y', 'z', {c = 3, d = 4}, {e = 5, f = 6}})
---
- [[1, 2], 'x', 'y', 'z', {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]
...
box.tuple.new('x', 'y', 'z', {1, 2}, {c = 3, d = 4}, {e = 5, f = 6})
---
- ['x', 'y', 'z', [1, 2], {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]
...
box.tuple.new({'x', 'y', 'z', {1, 2}, {c = 3, d = 4}, {e = 5, f = 6}})
---
- ['x', 'y', 'z', [1, 2], {'c': 3, 'd': 4}, {'e': 5, 'f': 6}]
...
t=box.tuple.new({'a','b','c'})
---
...
t:unpack(5)
---
- a
- b
- c
...
t:unpack(1, 2, 3, 4, 5)
---
- a
- b
- c
...
box.tuple.new({1, 2, 3}):totable()
---
- [1, 2, 3]
...
getmetatable(box.tuple.new({1, 2, 3}):totable())
---
- _serializer_type: array
  _serializer_compact: true
...
