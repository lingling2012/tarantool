# encoding: tarantool
import os
import sys
# Test Lua from admin console. Whenever producing output,
# make sure it's a valid YAML.
exec admin "lua"
exec admin "lua 1"
exec admin "lua print('  lua says: hello')"
# What's in the box?
exec admin "lua local t = {} for n in pairs(box) do table.insert(t, '  - box.' .. tostring(n)) end table.sort(t) for i = 1, #t do print(t[i]) end t = nil"
# Test box.pack()
exec admin "lua box.pack()"
exec admin "lua box.pack(1)"
exec admin "lua box.pack('abc')"
exec admin "lua print(box.pack('a', ' - hello'))"
exec admin "lua print(box.pack('Aa', ' - hello', ' world'))"
exec admin "lua print(box.pack('w', 0x30))"
exec admin "lua print(box.pack('www', 0x30, 0x30, 0x30))"
exec admin "lua print(box.pack('www', 0x3030, 0x30))"
exec admin "lua print(string.byte(box.pack('w', 212345), 1, 2))"
exec admin "lua print(string.sub(box.pack('p', 1684234849), 2))"
exec admin "lua print(box.pack('p', 'this string is 45 characters long 1234567890 '))"
exec admin "lua print(box.pack('s', 0x4d))"
exec admin "lua print(box.pack('ssss', 25940, 29811, 28448, 11883))"
exec admin "lua print(box.pack('SSSS', 25940, 29811, 28448, 11883))"
exec admin "lua print(box.pack('SSSSSSSS', 28493, 29550, 27680, 27497, 29541, 20512, 29285, 8556))"
exec admin "lua print(box.pack('bsilww', 84, 29541, 1802444916, 2338318684567380014ULL, 103, 111))"
exec admin "lua print(box.unpack('b', 'T'))"
exec admin "lua print(box.unpack('s', 'Te'))"
exec admin "lua print(box.unpack('i', 'Test'))"
exec admin "lua print(box.unpack('l', 'Test ok.'))"
exec admin "lua box.unpack('bsil', box.pack('bsil', 255, 65535, 4294967295, tonumber64('18446744073709551615')))"
exec admin "lua box.unpack('www', box.pack('www', 255, 65535, 4294967295))"
exec admin "lua box.unpack('ppp', box.pack('ppp', 'one', 'two', 'three'))"
exec admin "lua num, str, num64 = box.unpack('ppp', box.pack('ppp', 666, 'string', tonumber64('666666666666666')))"
exec admin "lua print(box.unpack('i', num), str, box.unpack('l', num64))"
exec admin "lua box.unpack('=p', box.pack('=p', 1, '666'))"
exec admin "lua box.unpack('','')"
exec admin "lua box.unpack('ii', box.pack('i', 1))"
exec admin "lua box.unpack('i', box.pack('ii', 1, 1))"
exec admin "lua box.unpack('+p', box.pack('=p', 1, '666'))"

# Test the low-level box.process() call, which takes a binary packet
# and passes it to box for execution.
# insert:
exec admin "lua box.process(13, box.pack('iiippp', 0, 1, 3, 1, 'testing', 'lua rocks'))"
# select:
exec admin "lua box.process(17, box.pack('iiiiiip', 0, 0, 0, 2^31, 1, 1, 1))"
# delete:
exec admin "lua box.process(21, box.pack('iiip', 0, 1, 1, 1))"
# check delete:
exec admin "lua box.process(17, box.pack('iiiiiip', 0, 0, 0, 2^31, 1, 1, 1))"
exec admin "lua box.process(22, box.pack('iii', 0, 0, 0))"
exec sql "call box.process('abc', 'def')"
exec sql "call box.pack('test')"
exec sql "call box.pack('p', 'this string is 45 characters long 1234567890 ')"
exec sql "call box.pack('p', 'ascii symbols are visible starting from code 20')"
exec admin "lua function f1() return 'testing', 1, false, -1, 1.123, 1e123, nil end"
exec admin "lua f1()"
exec sql "call f1()"
exec admin "lua f1=nil"
exec sql "call f1()"
exec admin "lua function f1() return f1 end"
exec sql "call f1()"

exec sql "insert into t0 values (1, 'test box delete')"
exec sql "call box.delete('0', '\1\0\0\0')"
exec sql "call box.delete('0', '\1\0\0\0')"
exec sql "insert into t0 values (1, 'test box delete')"
exec admin "lua box.delete(0, 1)"
exec admin "lua box.delete(0, 1)"
exec sql "insert into t0 values ('abcd', 'test box delete')"
exec sql "call box.delete('0', '\1\0\0\0')"
exec sql "call box.delete('0', 'abcd')"
exec sql "call box.delete('0', 'abcd')"
exec sql "insert into t0 values ('abcd', 'test box delete')"
exec admin "lua box.delete(0, 'abcd')"
exec admin "lua box.delete(0, 'abcd')"
exec sql "call box.select('0', '0', 'abcd')"
exec sql "insert into t0 values ('abcd', 'test box.select()')"
exec sql "call box.select('0', '0', 'abcd')"
exec admin "lua box.select(0, 0, 'abcd')"
exec admin "lua box.select(0, 0)"
exec admin "lua box.select(0, 1)"
exec admin "lua box.select(0)"
exec sql "call box.replace('0', 'abcd', 'hello', 'world')"
exec sql "call box.replace('0', 'defc', 'goodbye', 'universe')"
exec sql "call box.select('0', '0', 'abcd')"
exec sql "call box.select('0', '0', 'defc')"
exec sql "call box.replace('0', 'abcd')"
exec sql "call box.select('0', '0', 'abcd')"
exec sql "call box.delete('0', 'abcd')"
exec sql "call box.delete('0', 'defc')"
exec sql "call box.insert('0', 'test', 'old', 'abcd')"
# test that insert produces a duplicate key error
exec sql "call box.insert('0', 'test', 'old', 'abcd')"
exec sql "call box.update('0', 'test', '=p=p', '\0\0\0\0', 'pass', 1, 'new')"
exec sql "call box.select('0', '0', 'pass')"
exec sql "call box.select_range(0, 0, 1, 'pass')"
exec sql "call box.update('0', 'miss', '+p', 2, '\1\0\0\0')"
exec sql "call box.update('0', 'pass', '+p', 2, '\1\0\0\0')"
exec sql "call box.update('0', 'pass', '-p', 2, '\1\0\0\0')"
exec sql "call box.update('0', 'pass', '-p', 2, '\1\0\0\0')"
exec admin "lua box.update(0, 'pass', '+p', 2, 1)"
exec sql "call box.select('0', '0', 'pass')"
exec admin "lua function field_x(space, key, field_index) return (box.select(space, 0, key))[tonumber(field_index)] end"
exec sql "call field_x('0', 'pass', '0')"
exec sql "call field_x('0', 'pass', '1')"
exec sql "call box.delete('0', 'pass')"
fifo_lua = os.path.abspath("box/fifo.lua")
# don't log the path name
sys.stdout.push_filter("lua dofile(.*)", "lua dofile(...)")
exec admin "lua dofile('{0}')".format(fifo_lua)
sys.stdout.pop_filter()
exec admin "lua fifo_max"
exec admin "lua fifo_push('test', 1)"
exec admin "lua fifo_push('test', 2)"
exec admin "lua fifo_push('test', 3)"
exec admin "lua fifo_push('test', 4)"
exec admin "lua fifo_push('test', 5)"
exec admin "lua fifo_push('test', 6)"
exec admin "lua fifo_push('test', 7)"
exec admin "lua fifo_push('test', 8)"
exec admin "lua fifo_top('test')"
exec admin "lua box.delete(0, 'test')"
exec admin "lua fifo_top('test')"
exec admin "lua box.delete(0, 'test')"
exec admin "lua for k,v in pairs(box.cfg) do print(' - ', k, ': ', v) end"
exec admin "lua for k,v in pairs(box.space[0]) do if type(v) ~= 'table' then print(' - ', k, ': ', v) end end"
exec admin "reload configuration"
exec admin "lua for k,v in pairs(box.cfg) do print(' - ', k, ': ', v) end"
exec admin "lua for k,v in pairs(box.space[0]) do if type(v) ~= 'table' then print(' - ', k, ': ', v) end end"
# must be read-only
exec admin "lua box.cfg.nosuchoption = 1"
exec admin "lua box.space[300] = 1"

exec admin "lua box.index.new('abc', 'cde')"
exec admin "lua box.index.new(1, 2)"
exec admin "lua box.index.new(0, 1)"
exec admin "lua box.index.new(0, 0)"
exec admin "lua #box.index.new(0,0)"
exec admin "lua #box.space[0].index[0].idx"
exec admin "lua box.insert(0, 'test')"
exec admin "lua box.insert(0, 'abcd')"
exec admin "lua #box.index.new(0,0)"
exec admin "lua #box.space[0].index[0].idx"
exec admin "lua box.delete(0, 'test')"
exec admin "lua #box.index.new(0,0)"
exec admin "lua box.delete(0, 'abcd')"
exec admin "lua #box.space[0].index[0].idx"
exec admin "lua #box.index.new(0,0)"
exec admin "lua box.space[0]:insert('test', 'hello world')"
exec admin "lua box.space[0]:update('test', '=p', 1, 'bye, world')"
exec admin "lua box.space[0]:delete('test')"
# test tuple iterators
exec admin "lua t=box.space[0]:insert('test')"
exec admin "lua t:next('abcd')"
exec admin "lua t:next(1)"
exec admin "lua t:next(t)"
exec admin "lua t:next(t:next())"
exec admin "lua for k, v in t:pairs() do print(v) end"
exec admin "lua t=box.space[0]:replace('test', 'another field')"
exec admin "lua for k, v in t:pairs() do print(v) end"
exec admin "lua t=box.space[0]:replace('test', 'another field', 'one more')"
exec admin "lua for k, v in t:pairs() do print(v) end"
exec admin "lua t=box.tuple.new({'a', 'b', 'c', 'd'})"
exec admin "lua for it,field in t:pairs() do print(field); end"
exec admin "lua it, field = t:next()"
exec admin "lua getmetatable(it)"
exec admin "lua box.space[0]:truncate()"
exec admin "lua box.fiber.sleep(0)"
exec admin "lua box.fiber.sleep(0.01)"
exec admin "lua box.fiber.sleep(0.0001)"
exec admin "lua box.fiber.sleep('hello')"
exec admin "lua box.fiber.sleep(box, 0.001)"
exec admin "lua box.fiber.cancel(box.fiber.self())"
exec admin "lua f = box.fiber.self()"
exec admin "lua old_id = f:id()"
exec admin "lua box.fiber.cancel(f)"
exec admin "lua box.fiber.self():id() - old_id < 3"
exec admin "lua box.fiber.cancel(box.fiber.self())"
exec admin "lua box.fiber.self():id() - old_id < 5"
exec admin "lua g = box.fiber.self()"
exec admin "lua f==g"
exec admin "lua function r() f = box.fiber.create(r) return (box.fiber.resume(f)) end"
exec admin "lua r()"
exec admin "lua f = box.fiber.create(print('hello')"
exec admin "lua box.fiber.resume(f)"
# test passing arguments in and out created fiber
exec admin "lua function r(a, b) print(a) print(b) return a, b end"
exec admin "lua f=box.fiber.create(r)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua f=box.fiber.create(r)"
exec admin "lua box.fiber.resume(f, 'hello')"
exec admin "lua f=box.fiber.create(r)"
exec admin "lua box.fiber.resume(f, 'hello', 'world')"
exec admin "lua f=box.fiber.create(r)"
exec admin "lua box.fiber.resume(f, 'hello', 'world', 'wide')"
exec admin "lua function y(a, b) c=box.fiber.yield(a) return box.fiber.yield(b, c) end"
exec admin "lua f=box.fiber.create(y)"
exec admin "lua box.fiber.resume(f, 'hello', 'world')"
exec admin "lua box.fiber.resume(f, 'wide')"
exec admin "lua box.fiber.resume(f)"
exec admin "lua function y() print('started') box.fiber.detach() while true do box.replace(0, 'test', os.time()) box.fiber.sleep(0.001) end end"
exec admin "lua f = box.fiber.create(y)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua box.fiber.sleep(0.002)"
exec admin "lua box.fiber.cancel(f)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua f=nil"
exec admin "lua for k=1, 10000, 1 do box.fiber.create(function() box.fiber.detach() end) end"
exec admin "lua collectgarbage('collect')"
# check that these newly created fibers are garbage collected
exec admin "lua box.fiber.find(900)"
exec admin "lua box.fiber.find(910)"
exec admin "lua box.fiber.find(920)"

#
# Test box.fiber.wrap()
#
# This should try to infinitely create fibers,
# but hit the fiber stack size limit and fail
# with an error.
#
exec admin "lua f = function() box.fiber.wrap(f) end"
exec sql "call f()"
#
# Test argument passing
#
exec admin "lua f = function(a, b) box.fiber.wrap(function(arg) result = arg end, a..b) end"
exec admin "lua f('hello ', 'world')"
exec admin "lua result"
exec admin "lua f('bye ', 'world')"
exec admin "lua result"
#
# Test that the created fiber is detached
#
exec admin "lua box.fiber.wrap(function() result = box.fiber.status() end)"
exec admin "lua result"
#
#
print """# A test case for Bug#933487
# tarantool crashed during shutdown if non running LUA fiber
# was created
#"""
exec admin "lua f = box.fiber.create(function () return true end)"
exec admin "save snapshot"
exec admin "save snapshot"
exec admin "save snapshot"
exec admin "lua box.fiber.resume(f)"
exec admin "lua f = box.fiber.create(function () return true end)"
#
#
print """#
#
#"""
exec admin "lua box.space[0]:insert('test', 'something to splice')"
exec admin "lua box.space[0]:update('test', ':p', 1, box.pack('ppp', 0, 4, 'no'))"
exec admin "lua box.space[0]:update('test', ':p', 1, box.pack('ppp', 0, 2, 'every'))"
# check an incorrect offset
exec admin "lua box.space[0]:update('test', ':p', 1, box.pack('ppp', 100, 2, 'every'))"
exec admin "lua box.space[0]:update('test', ':p', 1, box.pack('ppp', -100, 2, 'every'))"
exec admin "lua box.space[0]:truncate()"
exec admin "lua box.space[0]:insert('test', 'hello', 'october', '20th'):unpack()"
exec admin "lua box.space[0]:truncate()"
# check how well we can return tables
exec admin "lua function f1(...) return {...} end"
exec admin "lua function f2(...) return f1({...}) end"
exec sql "call f1('test_', 'test_')"
exec sql "call f2('test_', 'test_')"
exec sql "call f1()"
exec sql "call f2()"

# check multi-tuple return
exec admin "lua function f3() return {{'hello'}, {'world'}} end"
exec sql "call f3()"
exec admin "lua function f3() return {'hello', {'world'}} end"
exec sql "call f3()"
exec admin "lua function f3() return 'hello', {{'world'}, {'canada'}} end"
exec sql "call f3()"
exec admin "lua function f3() return {}, '123', {{}, {}} end"
exec sql "call f3()"
exec admin "lua function f3() return { {{'hello'}} } end"
exec sql "call f3()"
exec admin "lua function f3() return { box.tuple.new('hello'), {'world'} } end"
exec sql "call f3()"
exec admin "lua function f3() return { {'world'}, box.tuple.new('hello') } end"
exec sql "call f3()"

exec sql "call f1('jason')"
exec sql "call f1('jason', 1, 'test', 2, 'stewart')"
lua = """
function box.crossjoin(space0, space1, limit)
  space0 = tonumber(space0)
  space1 = tonumber(space1)
  limit = tonumber(limit)
  local result = {}
  for k0, v0 in box.space[space0]:pairs() do
    for k1, v1 in box.space[space1]:pairs() do
      if limit <= 0 then
        return unpack(result)
      end
      newtuple = {v0:unpack()}
      for _, v in v1:pairs() do table.insert(newtuple, v) end
      table.insert(result, newtuple)
      limit = limit - 1
    end
  end
  return unpack(result)
end"""
exec admin "lua " + lua.replace('\n', ' ')
exec admin "lua box.crossjoin(0, 0, 0)"
exec admin "lua box.crossjoin(0, 0, 10000)"
exec admin "lua box.space[0]:insert(1)"
exec sql "call box.crossjoin('0', '0', '10000')"
exec admin "lua box.space[0]:insert(2)"
exec sql "call box.crossjoin('0', '0', '10000')"
exec admin "lua box.space[0]:insert(3, 'hello')"
exec sql "call box.crossjoin('0', '0', '10000')"
exec admin "lua box.space[0]:insert(4, 'world')"
exec admin "lua box.space[0]:insert(5, 'hello world')"
exec sql "call box.crossjoin('0', '0', '10000')"
exec admin "lua box.space[0]:truncate()"
exec admin "lua box.crossjoin = nil"
print """
# A test case for Bug#901674
# No way to inspect exceptions from Box in Lua
"""
exec admin "lua pcall(box.insert, 99, 1, 'test')"
exec admin "lua pcall(box.insert, 0, 1, 'hello')"
exec admin "lua pcall(box.insert, 0, 1, 'hello')"
exec admin "lua box.space[0]:truncate()"
print """
# A test case for Bug#908094
# Lua provides access to os.execute()
"""
exec admin "lua os.execute('ls')"


print """
#
# box.fiber test (create, resume, yield, status)
#
"""

box_fiber_lua = os.path.abspath("box/box_fiber.lua")
# don't log the path name
sys.stdout.push_filter("lua dofile(.*)", "lua dofile(...)")
exec admin "lua dofile('{0}')".format(box_fiber_lua)
sys.stdout.pop_filter()

print """
# test box.fiber.status functions: invalid arguments
"""
exec admin "lua box.fiber.status(1)"
exec admin "lua box.fiber.status('fafa-gaga')"
exec admin "lua box.fiber.status(nil)"

print """
# run fiber's test
"""
exec admin "lua box_fiber_run_test()"
# Testing 64bit
exec admin "lua tonumber64(123)"
exec admin "lua tonumber64('123')"
exec admin "lua type(tonumber64('123')) == 'cdata'"
exec admin "lua tonumber64('9223372036854775807') == tonumber64('9223372036854775807')"
exec admin "lua tonumber64('9223372036854775807') - tonumber64('9223372036854775800')"
exec admin "lua tonumber64('18446744073709551615') == tonumber64('18446744073709551615')"
exec admin "lua tonumber64('18446744073709551615') + 1"
exec admin "lua tonumber64(-1)"
exec admin "lua tonumber64('184467440737095516155')"
exec admin "lua string.byte(box.pack('p', tonumber64(123)))"
# test delete field
exec admin "lua box.space[0]:truncate()"
exec sql "call box.insert('0', 'tes1', 'tes2', 'tes3', 'tes4', 'tes5')"
exec sql "call box.update('0', 'tes1', '#p', 0, '')"
exec sql "call box.update('0', 'tes2', '#p', 0, '')"
exec sql "call box.update('0', 'tes3', '#p', 0, '')"
exec sql "call box.update('0', 'tes4', '#p', 0, '')"
exec admin "lua box.update(0, 'tes5', '#p', 0, '')"
exec admin "lua box.space[0]:truncate()"

print """
# test box.update: INSERT field
"""
exec admin "lua box.insert(0, 1, 3, 6, 9)"
exec admin "lua box.update(0, 1, '!p', 1, 2)"
exec admin "lua box.update(0, 1, '!p!p!p!p', 3, 4, 3, 5, 4, 7, 4, 8)"
exec admin "lua box.update(0, 1, '!p!p!p', 9, 10, 9, 11, 9, 12)"
exec admin "lua box.space[0]:truncate()"
exec admin "lua box.insert(0, 1, 'tuple')"
exec admin "lua box.update(0, 1, '#p!p=p', 1, '', 1, 'inserted tuple', 2, 'set tuple')"
exec admin "lua box.space[0]:truncate()"
exec admin "lua box.insert(0, 1, 'tuple')"
exec admin "lua box.update(0, 1, '=p!p#p', 1, 'set tuple', 1, 'inerted tuple', 2, '')"
exec admin "lua box.update(0, 1, '!p!p', 0, 3, 0, 2)"
exec admin "lua box.space[0]:truncate()"
print """
# Test for Bug #955226
# Lua Numbers are passed back wrongly as strings
#
"""
exec admin "lua function foo() return 1, 2, '1', '2' end"
exec sql "call foo()"


print """
# test update's assign opearations
"""
exec admin "lua box.replace(0, 1, 'field string value')"
exec admin "lua box.update(0, 1, '=p=p=p', 1, 'new field string value', 2, 42, 3, 0xdeadbeef)"

print """
# test update's arith opearations
"""
exec admin "lua box.update(0, 1, '+p&p|p^p', 2, 16, 3, 0xffff0000, 3, 0x0000a0a0, 3, 0xffff00aa)"

print """
# test update splice operation
"""
exec admin "lua ops_list = {}"
exec admin "lua table.insert(ops_list, box.upd.splice(1, 0, 3, 'the newest'))"
exec admin "lua box.update(0, 1, ':p', 1, box.pack('ppp', 0, 3, 'the newest'))"

print """
# test update delete operations
"""
exec admin "lua box.update(0, 1, '#p#p', 3, '', 2, '')"

print """
# test update insert operations
"""
exec admin "lua box.update(0, 1, '!p!p!p!p', 1, 1, 1, 2, 1, 3, 1, 4)"

exec admin "lua box.space[0]:truncate()"


print """
#
# test that ffi extension is inaccessible
#
"""

exec admin "lua ffi"


print """
#
# Lua init lua script test
#
"""

print """
# Load testing init lua script
"""
server.stop()
server.deploy(init_lua="box/test_init.lua")

print """
# Test asscess to box configuration
"""
exec admin "lua print_config()"

print """
# Test bug #977898
"""
# Run a dummy insert to avoid race conditions under valgrind
exec admin "lua box.insert(0, 4, 8, 16)"

print """
# Test insert from init.lua
"""
exec admin "lua box.select(0, 0, 1)"
exec admin "lua box.select(0, 0, 2)"
exec admin "lua box.select(0, 0, 4)"

print """
# Test bug #1002272
"""
exec admin "lua floor(0.5)"
exec admin "lua floor(0.9)"
exec admin "lua floor(1.1)"

print """
# clean-up after tests
"""
server.stop()
server.deploy(init_lua=None)
print """
# Test box.tuple:slice()
"""
exec admin "lua t=box.tuple.new({'0', '1', '2', '3', '4', '5', '6', '7'})"
exec admin "lua t:slice(0)"
exec admin "lua t:slice(-1)"
exec admin "lua t:slice(1)"
exec admin "lua t:slice(-1, -1)"
exec admin "lua t:slice(-1, 1)"
exec admin "lua t:slice(1, -1)"
exec admin "lua t:slice(1, 3)"
exec admin "lua t:slice(7)"
exec admin "lua t:slice(8)"
exec admin "lua t:slice(9)"
exec admin "lua t:slice(100500)"
exec admin "lua t:slice(9, -1)"
exec admin "lua t:slice(6, -1)"
exec admin "lua t:slice(4, 4)"
exec admin "lua t:slice(6, 4)"
exec admin "lua t:slice(0, 0)"
exec admin "lua t:slice(9, 10)"
exec admin "lua t:slice(-7)"
exec admin "lua t:slice(-8)"
exec admin "lua t:slice(-9)"
exec admin "lua t:slice(-100500)"
exec admin "lua t:slice(500, 700)"
exec admin "lua box.space[0]:truncate()"

print """
# A test case for Bug#911641 box.fiber.sleep() works incorrectly if
# a fiber is attached.
"""
exec admin "lua function r() return box.fiber.sleep(0.01) end"
exec admin "lua f = box.fiber.create(r)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua function r() box.fiber.yield(box.space[0]:insert(0, 0, 1)) box.fiber.yield(box.space[0]:select(0, 0)) box.fiber.yield(box.space[0]:truncate()) end"
exec admin "lua f = box.fiber.create(r)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua function r() return box.fiber.yield(box.fiber.create(r)) end"
exec admin "lua f = r()"
exec admin "lua f1 = box.fiber.resume(f)"
exec admin "lua f2 = box.fiber.resume(f1)"
exec admin "lua f3 = box.fiber.resume(f2)"
exec admin "lua f4 = box.fiber.resume(f3)"
exec admin "lua f5 = box.fiber.resume(f4)"
exec admin "lua f6 = box.fiber.resume(f5)"
exec admin "lua f7 = box.fiber.resume(f6)"
exec admin "lua f8 = box.fiber.resume(f7)"
exec admin "lua f9 = box.fiber.resume(f8)"
exec admin "lua f10 = box.fiber.resume(f9)"
exec admin "lua f11 = box.fiber.resume(f10)"
exec admin "lua f12 = box.fiber.resume(f11)"
exec admin "lua f13 = box.fiber.resume(f12)"
exec admin "lua f14 = box.fiber.resume(f13)"
exec admin "lua f15 = box.fiber.resume(f14)"
exec admin "lua f16 = box.fiber.resume(f15)"
exec admin "lua f17 = box.fiber.resume(f16)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua box.fiber.resume(f1)"
exec admin "lua box.fiber.resume(f2)"
exec admin "lua box.fiber.resume(f3)"
exec admin "lua box.fiber.resume(f4)"
exec admin "lua box.fiber.resume(f5)"
exec admin "lua box.fiber.resume(f6)"
exec admin "lua box.fiber.resume(f7)"
exec admin "lua box.fiber.resume(f8)"
exec admin "lua box.fiber.resume(f9)"
exec admin "lua box.fiber.resume(f10)"
exec admin "lua box.fiber.resume(f11)"
exec admin "lua box.fiber.resume(f12)"
exec admin "lua box.fiber.resume(f13)"
exec admin "lua box.fiber.resume(f14)"
exec admin "lua box.fiber.resume(f15)"
exec admin "lua box.fiber.resume(f16)"
exec admin "lua f17 = nil"
exec admin "lua function r() box.fiber.detach() box.fiber.sleep(1000) end"
exec admin "lua f = box.fiber.create(r)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua box.fiber.cancel(f)"
exec admin "lua box.fiber.resume(f)"

print """
# A test case for Bug#103491
# server CALL processing bug with name path longer than two
# https://bugs.launchpad.net/tarantool/+bug/1034912
"""
exec admin "lua f = function() return 'OK' end"
exec admin "lua test = {}"
exec admin "lua test.f = f"
exec admin "lua test.test = {}"
exec admin "lua test.test.f = f"
exec sql "call f()"
exec sql "call test.f()"
exec sql "call test.test.f()"
print """
# A test case for box.counter
"""
exec admin "lua box.counter.inc(0, 1)"
exec admin "lua box.select(0, 0, 1)"
exec admin "lua box.counter.inc(0, 1)"
exec admin "lua box.counter.inc(0, 1)"
exec admin "lua box.select(0, 0, 1)"
exec admin "lua box.counter.dec(0, 1)"
exec admin "lua box.counter.dec(0, 1)"
exec admin "lua box.select(0, 0, 1)"
exec admin "lua box.counter.dec(0, 1)"
exec admin "lua box.select(0, 0, 1)"


print """# box.dostring()"""
exec admin "lua box.dostring('abc')"
exec admin "lua box.dostring('abc=2')"
exec admin "lua box.dostring('return abc')"
exec admin "lua box.dostring('return ...', 1, 2, 3)"

print """# box.update: push/pop fields"""
exec admin "lua box.insert(0, 'abcd')"
exec admin "lua box.update(0, 'abcd', '#p', 1, '')"
exec admin "lua box.update(0, 'abcd', '=p', -1, 'push1')"
exec admin "lua box.update(0, 'abcd', '=p', -1, 'push2')"
exec admin "lua box.update(0, 'abcd', '=p', -1, 'push3')"
exec admin "lua box.update(0, 'abcd', '#p=p', 1, '', -1, 'swap1')"
exec admin "lua box.update(0, 'abcd', '#p=p', 1, '', -1, 'swap2')"
exec admin "lua box.update(0, 'abcd', '#p=p', 1, '', -1, 'swap3')"
exec admin "lua box.update(0, 'abcd', '#p=p', -1, '', -1, 'noop1')"
exec admin "lua box.update(0, 'abcd', '#p=p', -1, '', -1, 'noop2')"
exec admin "lua box.update(0, 'abcd', '#p=p', -1, '', -1, 'noop3')"
exec admin "lua box.space[0]:truncate()"

print """# A test case for Bug#1043804 lua error() -> server crash"""
exec admin "lua error()"
print """# Test box.fiber.name()"""
exec admin "lua old_name = box.fiber.name()"
exec admin "lua box.fiber.name() == old_name"
exec admin "lua box.fiber.self():name() == old_name"
exec admin "lua box.fiber.name('hello fiber')"
exec admin "lua box.fiber.name()"
exec admin "lua box.fiber.self():name('bye fiber')"
exec admin "lua box.fiber.self():name()"
exec admin "lua box.fiber.self():name(old_name)"

print """# A test case for bitwise operations """
exec admin "lua bit.lshift(1, 32)"
exec admin "lua bit.band(1, 3)"
exec admin "lua bit.bor(1, 2)"

print """# A test case for Bug#1061747 'tonumber64 is not transitive'"""
exec admin "lua tonumber64(tonumber64(2))"
exec admin "lua tostring(tonumber64(tonumber64(3)))"

print """# box.tuple.new test"""
exec admin "lua box.tuple.new()"
exec admin "lua box.tuple.new(1)"
exec admin "lua box.tuple.new('string')"
exec admin "lua box.tuple.new(tonumber64('18446744073709551615'))"
exec admin "lua box.tuple.new({tonumber64('18446744073709551615'), 'string', 1})"
print """# A test case for the key as an tuple"""
exec admin "lua t=box.insert(0, 777, '0', '1', '2', '3')"
exec admin "lua t"
exec admin "lua box.replace(0, t)"
exec admin "lua box.replace(0, 777, { 'a', 'b', 'c', {'d', 'e', t}})"
print """# A test case for tuple:totable() method"""
exec admin "lua t=box.select(0, 0, 777):totable()"
exec admin "lua t[2], t[3], t[4], t[5]"
exec admin "lua box.space[0]:truncate()"
print """# A test case for Bug#1119389 '(lbox_tuple_index) crashes on 'nil' argument'"""
exec admin "lua t=box.insert(0, 8989)"
exec admin "lua t[nil]"
print """# A test case for Bug#1131108 'tonumber64 from negative int inconsistency'"""
exec admin "lua tonumber64(-1)"
exec admin "lua tonumber64(-1LL)"
exec admin "lua tonumber64(-1ULL)"
exec admin "lua -1"
exec admin "lua -1LL"
exec admin "lua -1ULL"
exec admin "lua tonumber64(-1.0)"
exec admin "lua 6LL - 7LL"
print """# A test case for Bug#1131108 'incorrect conversion from boolean lua value to tarantool tuple'
"""
exec admin  "lua function bug1075677() local range = {} table.insert(range, 1>0) return range end"
exec sql "call bug1075677()"
exec admin "lua bug1075677=nil"
exec admin  "lua box.tuple.new(false)"
exec admin  "lua box.tuple.new({false})"

exec admin "lua t = box.tuple.new('abc')"
exec admin "lua t"
exec admin "lua t:bsize()"
exec admin silent "lua box.delete(0, 8989)"
print """#A test case for gh-37 - print(tonumber64(1)) adds extra newline"""
exec admin "lua print(1, tonumber64(2), 3)"

# A test case for https://github.com/tarantool/tarantool/issues/44
# IPROTO required!
exec sql "call box.dostring('box.raise(33333, \"Hey!\")')"

#
# A test case for #107 "box.tuple.unpack asserts on extra arguments"
#
exec admin "lua t=box.tuple.new({'a','b','c'})"
exec admin "lua t:unpack(5)"
exec admin "lua t:unpack(1, 2, 3, 4, 5)"


#
# A test case for #122 box.pack('p', t) segfault on recursive tables
#

exec admin "lua t = {1, 2, 3}"
exec admin "lua table.insert(t, t)"
exec admin "lua #box.pack('p', t)"
exec admin "lua #box.pack('V', 1, t)"
